#!/usr/bin/env ruby
# frozen_string_literal: true

require 'rake'
require 'optparse'
require 'r18n-core'
require 'neruda/config'
require 'neruda/version'

R18n.set(Neruda::Config.settings['lang'] || 'en',
         File.expand_path('../locales', __dir__))

# Pablo commands
module PabloCommands
  def pablo_init
    init_config
    init_rakefile
    @rake.run('org:install')
  end
  alias pablo_install pablo_init

  def pablo_build(file = ARGV)
    if file.nil?
      @rake.run('site:build')
    else
      @rake.run(ARGV.unshift('-B'))
    end
  end

  def pablo_preview
    @rake.run('site:preview')
  end
end

# Main pablo class
class Pablo
  def initialize(opts = {})
    @options = { verbose: false }.merge(opts)
    # Be sure required directories are always there
    init_path
    init_rake
  end

  include PabloCommands

  private

  def init_path
    public_path = Neruda::Config.settings['public_folder'] || 'public_html'
    FileUtils.mkdir_p "#{public_path}/assets"
    local_blog_path = Neruda::Config.settings['blog_slug'] || 'blog'
    FileUtils.mkdir_p "src/#{local_blog_path}"
  end

  def init_rake
    @rake = Rake.application
    Rake.verbose(false) unless @options[:verbose]
  end

  def init_config
    config = Neruda::Config.settings.merge
    changed = false
    if config['author'].nil? || config['author'] == ''
      puts R18n.t.pablo.set_author_name
      author = STDIN.gets.strip
      if author != ''
        config['author'] = author
        changed = true
      end
    end
    if config['lang'].nil? || config['lang'] == ''
      config['lang'] = 'en'
      puts R18n.t.pablo.set_lang(config['lang'])
      lang = STDIN.gets.strip
      config['lang'] = lang if lang != ''
      changed = true
    end
    Neruda::Config.save(config) if changed
  end

  def init_rakefile
    rakefile = <<~RAKE
      # frozen_string_literal: true

      require 'neruda/config'
      require 'r18n-core'

      neruda_spec = Gem::Specification.find_by_name 'neruda'
      R18n.set(Neruda::Config.settings['lang'] || 'en',
               "\#{neruda_spec.gem_dir}/locales")

      Dir.glob("\#{neruda_spec.gem_dir}/lib/tasks/*.rake").each { |r| import r }

      task default: 'site:build'
    RAKE
    File.open('Rakefile', 'w') do |f|
      f.puts rakefile
    end
  end
end

def check_command
  cmd = ARGV[0]
  if cmd == 'new'
    cmd = 'edit'
  elsif cmd == 'install'
    cmd = 'init'
  end
  "pablo_#{cmd}".to_sym
end

def pablo_help(banner)
  warn banner
  warn <<~HELP

    System Commands
        init         Initialize your Neruda instance
                     (you just need to do it once).
  HELP
  exit
end

params = {}
optparser = OptionParser.new do |opts|
  opts.banner = <<~HELP
    Usage: pablo [-v] <command>
           pablo -h

  HELP
  opts.version = Neruda::VERSION
  opts.program_name = 'pablo (Neruda gem)'
  opts.on('-v', '--verbose', 'Output more information') do
    params[:verbose] = true
  end
  opts.on_tail('-h', '--help', 'Display this screen') do
    pablo_help(opts)
  end
  opts.on_tail('-V', '--version', 'Show version') do
    puts opts.ver
    exit
  end
end
optparser.parse!

pablo = Pablo.new(params)
command = check_command
if command.nil? || !pablo.respond_to?(command)
  warn R18n.t.pablo.error.no_command
  pablo_help(optparser)
  exit 1
end
ARGV.shift

pablo.pablo_init if !File.exist?('config.yml') && command != 'pablo_init'
pablo.send command
