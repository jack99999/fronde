#!/usr/bin/env ruby
# frozen_string_literal: true

require 'rake'
require 'optparse'
require 'r18n-core'
require 'neruda/utils'
require 'neruda/version'

R18n.default_places = File.expand_path('../locales', __dir__)
R18n.set Neruda::Config.settings['lang']

# Pablo commands
module PabloCommands
  def pablo_init
    cnf = @options.merge
    cnf.delete(:verbose)
    cnf.delete(:directory)
    cnf.transform_keys!(&:to_s)
    Neruda::Config.save(Neruda::Config.settings.merge(cnf))
    @rake.options.build_all = true
    @rake.invoke_task('org:install')
    return if File.exist? 'src/index.org'
    Neruda::OrgFile.new('src/index.org', @options).write
  end
  alias_method :pablo_config, :pablo_init

  def pablo_build(file = ARGV[0])
    @rake.options.build_all = true
    if file.nil?
      @rake.invoke_task('site:build')
    else
      @rake.invoke_task("site:build:one[#{file}]")
    end
  end

  def pablo_preview
    Thread.new do
      sleep 1
      port = Neruda::Config.settings.dig('preview', 'server_port') || 5000
      uri = "http://127.0.0.1:#{port}/"
      current_os = Neruda::Utils.current_os
      case current_os
      when 'windows'
        system 'start', uri
      when 'apple'
        system 'open', uri
      else
        system 'gio', 'open', uri
      end
    end
    @rake.invoke_task('site:preview')
  end

  def pablo_open
    filename = new_file_name(ARGV[0])
    FileUtils.mkdir_p File.dirname(filename)
    o = Neruda::OrgFile.new(filename, @options)
    o.write unless File.exist? filename
    editor = ENV['EDITOR'] || ENV['VISUAL'] || 'emacs'
    cmd = [editor, '+6', filename]
    system(*cmd)
  end
  alias_method :pablo_edit, :pablo_open

  def pablo_publish
    @rake.invoke_task('sync:push')
  end

  def pablo_help(command = 'basic', error: false)
    warn R18n.t.pablo.error.no_command if error
    cmd = Neruda::Utils.resolve_possible_alias(command)
    cmd_opt = Neruda::Utils::PABLO_COMMANDS[cmd]
    label = cmd_opt[:label] || command
    warn format("%<label>s\n\n", label: R18n.t.pablo.usage(label))
    if R18n.t.pablo.commands[cmd].translated?
      warn format("%<label>s\n\n", label: R18n.t.pablo.commands[cmd])
    end
    warn help_command_body(cmd).join("\n")
    exit 1 if error
    exit
  end

  private

  def new_file_name(title)
    title ||= @options[:title]
    title = 'new' if title.nil? || title == ''
    filename = Neruda::OrgFile.slug title
    return "#{filename}.org" unless @options[:directory]
    "#{filename}/index.org"
  end

  def help_command_body(command)
    body = [
      R18n.t.pablo.options.cmd_title,
      Neruda::Utils.summarize_command(command)
    ]
    return body unless command == 'basic'
    body + [
      '',
      R18n.t.pablo.commands.cmd_title,
      Neruda::Utils.list_commands
    ]
  end
end

# Main pablo class
class Pablo
  def initialize(opts = {})
    @options = { verbose: false }.merge(opts)
    init_rake
  end

  include PabloCommands

  private

  def init_rake
    init_rakefile unless File.exist?('Rakefile')
    @rake = Rake.application
    Rake.verbose(false) unless @options[:verbose]
    @rake.raw_load_rakefile
  end

  def init_rakefile
    rakefile = <<~RAKE
      # frozen_string_literal: true

      require 'neruda/config'
      require 'r18n-core'

      neruda_spec = Gem::Specification.find_by_name 'neruda'
      R18n.default_places = "\#{neruda_spec.gem_dir}/locales"
      R18n.set(Neruda::Config.settings['lang'] || 'en')
      R18n::Filters.on(:named_variables)

      Dir.glob("\#{neruda_spec.gem_dir}/lib/tasks/*.rake").each { |r| import r }

      task default: 'site:build'
    RAKE
    IO.write 'Rakefile', rakefile
  end
end

optparser = OptionParser.new
optparser.version = Neruda::VERSION

Neruda::Utils::PABLO_OPTIONS.each do |k, opt|
  optparser.send(opt[:meth] || :on, *Neruda::Utils.decorate_option(k))
end

params = {}
optparser.parse!(into: params)

if params[:version]
  warn optparser.ver
  exit
end

if ARGV[0] == 'help'
  params[:help] = true
  ARGV.shift
end
pablo = Pablo.new(params)
command = "pablo_#{ARGV[0]}".to_sym
cmd_err = !pablo.respond_to?(command)
if params[:help] || cmd_err
  cmd_err = false if params[:help] && !ARGV[0]
  pablo.pablo_help(ARGV[0], error: cmd_err)
end
ARGV.shift

init_cmds = [:pablo_init, :pablo_config]
pablo.pablo_init unless File.exist?('config.yml') || init_cmds.include?(command)
pablo.send command
