#!/usr/bin/env ruby
# frozen_string_literal: true

require 'rake'
require 'optparse'
require 'r18n-core'
require 'neruda/config'
require 'neruda/version'

R18n.set(Neruda::Config.settings['lang'] || 'en',
         File.expand_path('../locales', __dir__))

# Pablo commands
module PabloCommands
  def pablo_init
    cnf = @options.merge
    cnf.delete(:verbose)
    cnf.delete(:blog)
    cnf.transform_keys!(&:to_s)
    Neruda::Config.save(Neruda::Config.settings.merge(cnf))
    o = Neruda::OrgFile.new('src/index.org', @options)
    o.write unless File.exist? 'src/index.org'
    @rake.options.build_all = true
    @rake.invoke_task('org:install')
  end
  alias pablo_config pablo_init

  def pablo_build(file = ARGV[0])
    @rake.options.build_all = true
    if file.nil?
      @rake.invoke_task('site:index')
      @rake.invoke_task('site:build')
    else
      @rake.invoke_task("site:build[#{file}]")
    end
  end

  def pablo_preview
    @rake.invoke_task('site:preview')
  end

  def pablo_open
    filename = ARGV[0] || Neruda::OrgFile.file_name(@options[:title],
                                                    @options[:blog])
    FileUtils.mkdir_p File.dirname(filename)
    o = Neruda::OrgFile.new(filename, @options)
    o.write unless File.exist? filename

    editor = ENV['EDITOR'] || ENV['VISUAL'] || 'emacs'
    cmd = [editor, filename]
    cmd.insert(1, '+6') if editor.match?(/^emacs/)
    system(*cmd)
  end
end

# Main pablo class
class Pablo
  def initialize(opts = {})
    @options = { verbose: false }.merge(opts)
    # Be sure required directories are always there
    init_path
    init_rake
  end

  include PabloCommands

  private

  def init_path
    FileUtils.mkdir_p "#{Neruda::Config.settings['public_folder']}/assets"
    FileUtils.mkdir_p 'src'
  end

  def init_rake
    init_rakefile unless File.exist?('Rakefile')
    @rake = Rake.application
    Rake.verbose(false) unless @options[:verbose]
    @rake.raw_load_rakefile
  end

  def init_rakefile
    rakefile = <<~RAKE
      # frozen_string_literal: true

      require 'neruda/config'
      require 'r18n-core'

      neruda_spec = Gem::Specification.find_by_name 'neruda'
      R18n.set(Neruda::Config.settings['lang'] || 'en',
               "\#{neruda_spec.gem_dir}/locales")

      Dir.glob("\#{neruda_spec.gem_dir}/lib/tasks/*.rake").each { |r| import r }

      task default: 'site:build'
    RAKE
    File.open('Rakefile', 'w') do |f|
      f.puts rakefile
    end
  end
end

def pablo_help(banner)
  warn banner
  warn <<~HELP

    Commands
        open [path]  Open or create an org file for edition.

    System Commands
        init         Initialize your Neruda instance
                     (you just need to do it once).
        preview      Start a test webserver to preview
                     your website on http://127.0.0.1:5000
  HELP
  exit
end

params = {}
optparser = OptionParser.new do |opts|
  opts.banner = <<~HELP
    Usage: pablo [-v] <command>
           pablo -h

  HELP
  opts.version = Neruda::VERSION
  opts.program_name = 'pablo (Neruda gem)'
  opts.on '-aAUTHOR', '--author AUTHOR'
  opts.on '-lLOCALE', '--lang LOCALE'
  opts.on '-tTITLE', '--title TITLE'
  opts.on '-b', '--blog'
  opts.on_tail '-v', '--verbose'
  opts.on_tail '-h', '--help'
  opts.on_tail '-V', '--version'
end
optparser.parse!(into: params)

if params[:version]
  warn optparser.ver
  exit
elsif params[:help]
  pablo_help optparser
end

pablo = Pablo.new(params)
command = "pablo_#{ARGV[0]}".to_sym
if command.nil? || !pablo.respond_to?(command)
  warn R18n.t.pablo.error.no_command
  pablo_help(optparser)
  exit 1
end
ARGV.shift

init_cmds = ['pablo_init', 'pablo_config']
pablo.pablo_init unless File.exist?('config.yml') || init_cmds.include?(command)
pablo.send command
