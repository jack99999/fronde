#!/usr/bin/env ruby
# coding: utf-8
# frozen_string_literal: true

require 'yaml'
require 'rainbow'
require 'fileutils'

def help
  unless File.exist? 'config/config.yml'
    STDERR.puts 'Please init your website: ' +
                Rainbow('pablo init').yellow
    exit 1
  end

  options = ['start', 'stop', 'new', 'compile']
  options << 'capify' if File.exist? 'Capfile'

  STDERR.puts 'Usage: ' + Rainbow("pablo [ #{options.join(' | ')} ]").yellow
end

def bundler_is_present?
  ENV['PATH'].split(':').each do |folder|
    return true if File.exist? File.join(folder, 'bundle')
  end
  false
end

def capify
  unless File.exist? 'Capfile'
    STDERR.puts Rainbow('ERROR: Capfile does not exist.').red
    exit 1
  end

  capfile = File.new('Capfile', 'a')
  capfile.write <<~EOF
    neruda_spec = Gem::Specification.find_by_name 'neruda'
    Dir.glob("\#{neruda_spec.gem_dir}/lib/tasks/*.rake").each { |r| import r }
    Dir.glob("\#{neruda_spec.gem_dir}/lib/tasks/capistrano/*.rake").each { |r| import r }
  EOF
end

def _init_path
  FileUtils.mkdir_p 'config'
  FileUtils.mkdir_p 'public'
  FileUtils.mkdir_p 'tmp/pids'
  FileUtils.mkdir_p 'private/orgs'
  FileUtils.mkdir_p 'private/epubs'
end

def _init_config
  config = {}
  print 'Name of your website: '
  config['title'] = STDIN.gets.strip
  print 'Your author name: '
  config['author'] = STDIN.gets.strip
  print 'Main language of your website [en_US]: '
  lang = STDIN.gets.strip
  lang = 'en_US' if lang == ''
  config['lang'] = lang

  main_title = config['title'].tr(' ', '_').downcase.gsub(/[^a-z0-9_]/, '')
  print "Filename of the main generated epub [#{main_title}]: "
  epub = STDIN.gets.strip
  if epub == ''
    epub = main_title
  else
    epub = File.basename(epub, '.epub')
  end
  config['book_filename'] = epub
  config['chapters'] = []

  IO.write 'config/config.yml', config.to_yaml
end

def _init_assets
  unless Dir.exist? 'views'
    FileUtils.cp_r File.join(__dir__, '../lib/assets'), 'views'
  end

  return if File.exist? 'public/style.css'
  FileUtils.mv 'views/style.css', 'public/style.css'
end

def _init_rackup
  unless File.exist? 'Rakefile'
    FileUtils.copy File.join(__dir__, '../docs/Rakefile.example'), 'Rakefile'
  end

  return if File.exist? 'config.ru'
  rackup_conf = <<~EOF
    # frozen_string_literal: true

    require 'neruda'
    run Neruda::App
  EOF
  IO.write('config.ru', rackup_conf)
end

def _init_bundler
  return if File.exist? 'Gemfile'
  puts ''
  puts 'Bundler has been detected in your path.'
  # puts ''
  # print 'Do you want to use [o]rg files, [m]arkdown files or [b]oth' \
  #       ' (default is org): '
  # markup = STDIN.gets.strip.downcase
  # if markup == 'm'
  #   markup_gem = 'gem \'kramdown\''
  # elsif markup == 'b'
  #   markup_gem = "gem 'kramdown'\ngem 'org-ruby'"
  # else
  #   markup_gem = 'gem \'org-ruby\''
  # end
  markup_gem = 'gem \'org-ruby\''

  gemfile = <<~EOF
    # frozen_string_literal: true

    source 'https://rubygems.org'

    gem 'neruda'
    #{markup_gem}

    group :development do
      gem 'capistrano'
      gem 'capistrano-bundler'
      gem 'capistrano-rvm'
      gem 'rubocop'
    end
  EOF
  IO.write('Gemfile', gemfile)
  puts ''
  puts 'To complete this installation, you must now run: ' +
       Rainbow('bundle install').yellow
end

def init
  puts Rainbow('Creating main folders…').green
  _init_path
  puts Rainbow('Populating config file…').green
  _init_config
  puts Rainbow('Copying template files…').green
  _init_assets
  puts Rainbow('Installing rake files…').green
  _init_rackup
  puts ''
  puts Rainbow('Neruda has been successfully installed.').green
  _init_bundler if bundler_is_present?
end

def create_new(title)
  if title == ''
    filename = 'new'
  else
    filename = title.tr(' ', '_').downcase.gsub(/[^a-z0-9_]/, '')
  end

  filename = "private/orgs/#{filename}.org"

  FileUtils.mkdir_p 'private/orgs' unless Dir.exist? 'private/orgs'
  config = YAML.load_file('config/config.yml')
  IO.write filename, <<~EOF
    #+title: #{title}
    #+date: <#{Date.today.strftime('%Y-%m-%d %a.')}>
    #+author: #{config['author']}


  EOF

  editor = ENV['EDITOR'] || ENV['VISUAL'] || 'emacs'
  exec editor, filename
end

if ARGV[0] == 'init'
  init

elsif ARGV[0] == 'capify'
  capify

elsif ['start', 'run'].include?(ARGV[0])
  if bundler_is_present?
    puts Rainbow('bundle exec rake sinatra:start').green
    exec 'bundle', 'exec', 'rake', 'sinatra:start'
  else
    puts Rainbow('rake sinatra:start').green
    exec 'rake', 'sinatra:start'
  end

elsif ARGV[0] == 'stop'
  if bundler_is_present?
    puts Rainbow('bundle exec rake sinatra:stop').green
    exec 'bundle', 'exec', 'rake', 'sinatra:stop'
  else
    puts Rainbow('rake sinatra:stop').green
    exec 'rake', 'sinatra:stop'
  end

elsif ARGV[0] == 'compile'
  if bundler_is_present?
    puts Rainbow('bundle exec rake chapters:build_epubs').green
    exec 'bundle', 'exec', 'rake', 'chapters:build_epubs'
    puts Rainbow('bundle exec rake chapters:make_book').green
    exec 'bundle', 'exec', 'rake', 'chapters:make_book'
  else
    puts Rainbow('rake chapters:build_epubs').green
    exec 'rake', 'chapters:build_epubs'
    puts Rainbow('rake chapters:make_book').green
    exec 'rake', 'chapters:make_book'
  end

elsif ARGV[0] == 'new'
  if ARGV[1].nil?
    print 'Title: '
    title = STDIN.gets.strip
  else
    title = ARGV[1]
  end
  create_new title

else
  help
end
