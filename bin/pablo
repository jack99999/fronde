#!/usr/bin/env ruby
# coding: utf-8
# frozen_string_literal: true

require 'yaml'
require 'rainbow'
require 'optparse'
require 'fileutils'

# Methods used to play with bundler
module BundlerHelper
  def bundler_is_present?
    return false unless File.exist?('Gemfile')
    ENV['PATH'].split(':').each do |folder|
      return true if File.exist? File.join(folder, 'bundle')
    end
    false
  end

  def rake_or_bundle_run(cmd, use_system = false)
    cmd.insert(1, '-s') unless @options[:verbose]
    cmd = ['bundle', 'exec'] + cmd if bundler_is_present?
    puts Rainbow(cmd.join(' ')).blue if @options[:verbose]
    return cmd.join(' ') if use_system
    exec(*cmd)
  end

  def capify
    unless File.exist? 'Capfile'
      STDERR.puts Rainbow('ERROR: Capfile does not exist.').red
      exit 1
    end

    capfile = File.new('Capfile', 'a')
    capfile.write <<~EOF
    neruda_spec = Gem::Specification.find_by_name 'neruda'
    Dir.glob("\#{neruda_spec.gem_dir}/lib/tasks/*.rake").each { |r| import r }
    Dir.glob("\#{neruda_spec.gem_dir}/lib/tasks/capistrano/*.rake").each { |r| import r }
    EOF
  end
end

# Methods used with pablo init method
module PabloInit
  def init_path
    FileUtils.mkdir_p 'config'
    FileUtils.mkdir_p 'public'
    FileUtils.mkdir_p 'tmp/pids'
    FileUtils.mkdir_p 'private/characters'
    FileUtils.mkdir_p 'private/sceneries'
    FileUtils.mkdir_p 'private/chapters'
    FileUtils.mkdir_p 'private/notes'
    FileUtils.mkdir_p 'private/epubs'
  end

  def init_config
    config = {}
    print 'Name of your website: '
    config['title'] = STDIN.gets.strip
    print 'Your author name: '
    config['author'] = STDIN.gets.strip
    print 'Main language of your website [en_US]: '
    lang = STDIN.gets.strip
    lang = 'en_US' if lang == ''
    config['lang'] = lang

    main_title = config['title'].tr(' ', '_').downcase.gsub(/[^a-z0-9_]/, '')
    print "Filename of the main generated epub [#{main_title}]: "
    epub = STDIN.gets.strip
    if epub == ''
      epub = main_title
    else
      epub = File.basename(epub, '.epub')
    end
    config['book_filename'] = epub
    config['chapters'] = []

    IO.write 'config/config.yml', config.to_yaml
  end

  def init_assets
    unless Dir.exist? 'views'
      FileUtils.cp_r File.join(__dir__, '../lib/assets'), 'views'
    end

    return if File.exist? 'public/style.css'
    FileUtils.mv 'views/style.css', 'public/style.css'
  end

  def init_rackup
    unless File.exist? 'Rakefile'
      FileUtils.copy File.join(__dir__, '../docs/Rakefile.example'), 'Rakefile'
    end

    return if File.exist? 'config.ru'
    rackup_conf = <<~EOF
    # frozen_string_literal: true

    require 'neruda'
    run Neruda::App
  EOF
    IO.write('config.ru', rackup_conf)
  end

  def init_bundler
    return if File.exist? 'Gemfile'
    puts ''
    puts 'Bundler has been detected in your path.'
    # puts ''
    # print 'Do you want to use [o]rg files, [m]arkdown files or [b]oth' \
    #       ' (default is org): '
    # markup = STDIN.gets.strip.downcase
    # if markup == 'm'
    #   markup_gem = 'gem \'kramdown\''
    # elsif markup == 'b'
    #   markup_gem = "gem 'kramdown'\ngem 'org-ruby'"
    # else
    #   markup_gem = 'gem \'org-ruby\''
    # end
    markup_gem = 'gem \'org-ruby\''

    gemfile = <<~EOF
    # frozen_string_literal: true

    source 'https://rubygems.org'

    gem 'neruda'
    #{markup_gem}

    group :development do
      gem 'capistrano'
      gem 'capistrano-bundler'
      gem 'capistrano-rvm'
      gem 'rubocop'
    end
  EOF
    IO.write('Gemfile', gemfile)
    puts ''
    puts 'To complete this installation, you must now run: ' +
         Rainbow('bundle install').yellow
  end

  def setup
    puts Rainbow('Creating main folders…').blue
    init_path
    puts Rainbow('Populating config file…').blue
    init_config
    puts Rainbow('Copying template files…').blue
    init_assets
    puts Rainbow('Installing rake files…').blue
    init_rackup
    puts ''
    puts Rainbow('Neruda has been successfully installed.').green
    init_bundler if bundler_is_present?
  end
end

# Main pablo class
class Pablo
  def initialize
    @options = {
      verbose: false
    }
    @available_commands = ['capify', 'list', 'start', 'new_chapter',
                           'setup', 'stop', 'compile']

    parse_options
    route_command
  end

  def route_command
    case @arg
    when 'capify', 'list', 'start', 'new_chapter', 'setup'
      send @arg

    when 'stop'
      rake_or_bundle_run ['rake', 'sinatra:stop']

    when 'compile'
      rake_or_bundle_run ['rake', 'chapters:build_epubs'], true
      rake_or_bundle_run ['rake', 'book:make']
    end
  end

  private

  def parse_options
    optparse = OptionParser.new do |opts|
      opts.banner = <<~EOF
        Usage:
            pablo -h
            pablo [ -v ] command

      EOF
      opts.on('-v', '--verbose', 'Output more information') do
        @options[:verbose] = true
      end
      opts.on('-h', '--help', 'Display this screen') do
        STDERR.puts opts
        pablo_help
      end
    end

    optparse.parse!

    @arg = ARGV[0]
    if @arg == 'new'
      @arg = 'new_chapter'
    elsif @arg == 'run'
      @arg = 'start'
    end

    return if @available_commands.include?(@arg)
    STDERR.puts Rainbow('ERROR: no or unknown command given.').red
    STDERR.puts Rainbow('Run pablo -h for options and available ' \
                        'commands').red
    exit 1
  end

  include BundlerHelper
  include PabloInit

  def pablo_help
    STDERR.puts <<~EOF

      Book Commands:
          new [title]     Begin to write a new chapter
          compile         Generate the epubs files
          list [elements] List various book elements
                          (chapters, characters, notes, sceneries)

      System Commands
          setup           Initialize your Neruda instance
                          (you just need to do it once).
          start           Start a test web server
          stop            Stop the web server
    EOF
    exit
  end

  def start
    loc_env = ENV['APP_ENV'] || 'development'
    if loc_env != 'production'
      puts Rainbow("Neruda is run in #{loc_env} environment").green
    else
      puts Rainbow('>> Neruda is run in production environment <<').yellow
    end
    puts ''
    rake_or_bundle_run ['rake', 'sinatra:start']
  end

  def new_chapter
    if ARGV[1].nil?
      print 'Title: '
      title = STDIN.gets.strip
    else
      title = ARGV[1]
    end
    rake_or_bundle_run ['rake', "chapters:new[#{title}]"]
  end

  def list
    list_type = ARGV[1] || 'chapters'
    rake_or_bundle_run ['rake', "book:list[#{list_type}]"]
  end
end

Pablo.new
