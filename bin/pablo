#!/usr/bin/env ruby
# frozen_string_literal: true

require 'rake'
require 'optparse'
require 'r18n-core'
require 'neruda/config'
require 'neruda/version'

R18n.set(Neruda::Config.settings['lang'] || 'en',
         File.expand_path('../locales', __dir__))

# Pablo commands
module PabloCommands
  def pablo_init
    @rake.invoke_task('site:config')
    @rake.invoke_task('org:install')
  end
  alias pablo_config pablo_init

  def pablo_build(file = ARGV[0])
    @rake.options.build_all = true
    if file.nil?
      @rake.invoke_task('site:build')
      @rake.invoke_task('site:index')
    else
      @rake.invoke_task(file)
    end
  end

  def pablo_preview
    @rake.invoke_task('site:preview')
  end
end

# Main pablo class
class Pablo
  def initialize(opts = {})
    @options = { verbose: false }.merge(opts)
    # Be sure required directories are always there
    init_path
    init_rake
  end

  include PabloCommands

  private

  def init_path
    public_path = Neruda::Config.settings['public_folder'] || 'public_html'
    FileUtils.mkdir_p "#{public_path}/assets"
    local_blog_path = Neruda::Config.settings['blog_slug'] || 'blog'
    FileUtils.mkdir_p "src/#{local_blog_path}"
  end

  def init_rake
    init_rakefile unless File.exist?('Rakefile')
    @rake = Rake.application
    Rake.verbose(false) unless @options[:verbose]
    @rake.raw_load_rakefile
  end

  def init_rakefile
    rakefile = <<~RAKE
      # frozen_string_literal: true

      require 'neruda/config'
      require 'r18n-core'

      neruda_spec = Gem::Specification.find_by_name 'neruda'
      R18n.set(Neruda::Config.settings['lang'] || 'en',
               "\#{neruda_spec.gem_dir}/locales")

      Dir.glob("\#{neruda_spec.gem_dir}/lib/tasks/*.rake").each { |r| import r }

      task default: 'site:build'
    RAKE
    File.open('Rakefile', 'w') do |f|
      f.puts rakefile
    end
  end
end

def pablo_help(banner)
  warn banner
  warn <<~HELP

    System Commands
        init         Initialize your Neruda instance
                     (you just need to do it once).
        preview      Start a test webserver to preview
                     your website on http://127.0.0.1:5000
  HELP
  exit
end

params = {}
optparser = OptionParser.new do |opts|
  opts.banner = <<~HELP
    Usage: pablo [-v] <command>
           pablo -h

  HELP
  opts.version = Neruda::VERSION
  opts.program_name = 'pablo (Neruda gem)'
  opts.on('-v', '--verbose', 'Output more information') do
    params[:verbose] = true
  end
  opts.on_tail('-h', '--help', 'Display this screen') do
    pablo_help(opts)
  end
  opts.on_tail('-V', '--version', 'Show version') do
    puts opts.ver
    exit
  end
end
optparser.parse!

pablo = Pablo.new(params)
command = "pablo_#{ARGV[0]}".to_sym
if command.nil? || !pablo.respond_to?(command)
  warn R18n.t.pablo.error.no_command
  pablo_help(optparser)
  exit 1
end
ARGV.shift

init_alias = ['pablo_init', 'pablo_config']
pablo.pablo_init if !File.exist?('config.yml') && init_alias.include?(command)
pablo.send command
